<?php

define('CULTUREFEED_API_LOCATION', 'http://test.uitid.be/culturefeed/rest/');

/**
 * Implements hook_init().
 */
function culturefeed_init() {
  drupal_add_js(drupal_get_path('module', 'culturefeed') . '/js/culturefeed.js');
}

/**
 * Implements hook_menu().
 */
function culturefeed_menu() {
  $items['admin/config/services/culturefeed'] = array(
    'title' => 'Culture Feed',
    'description' => 'Change Culture Feed API setting like API Appliction key, location, ...',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'culturefeed.admin.inc',
  );
  $items['culturefeed/oauth/connect'] = array(
    'title' => 'Connect',
    'page callback' => 'culturefeed_oauth_connect',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed.pages.inc',
  );
  $items['culturefeed/oauth/connect/register'] = array(
    'title' => 'Connect',
    'page callback' => 'culturefeed_oauth_connect',
    'page arguments' => array(CultureFeed::AUTHORIZE_TYPE_REGISTER),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed.pages.inc',
  );
  $items['culturefeed/oauth/authorize'] = array(
    'title' => 'Connect',
    'page callback' => 'culturefeed_oauth_authorize',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed.pages.inc',
  );

  return $items;
}

function culturefeed_user_create($cf_uid) {
  $url = parse_url($GLOBALS['base_url']);
  $account = user_save(
    drupal_anonymous_user(),
    array(
      'name' => $cf_uid,
      'pass' => user_password(),
      'mail' => $cf_uid . '@uitid.be',
      'roles' => array(),
      'status' => 1,
      'timezone' => variable_get('date_default_timezone', date_default_timezone_get()),
    )
  );

  return $account;
}

/**
 * Implements hook_user_load().
 */
function culturefeed_user_load($users) {
  $result = db_query('SELECT cfu.uid, cfu.cf_uid, cft.application_key, cft.token, cft.secret FROM {culturefeed_user} cfu LEFT JOIN {culturefeed_token} cft ON cft.cf_uid = cfu.cf_uid WHERE cfu.uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->culturefeed_uid = $record->cf_uid;
    if (!isset($users[$record->uid]->tokens)) {
      $users[$record->uid]->tokens = array();
    }
    if ($record->token) {
      $users[$record->uid]->tokens[$record->application_key]->token = $record->token;
      $users[$record->uid]->tokens[$record->application_key]->secret = $record->secret;
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function culturefeed_user_delete($account) {
  $culturefeed_uid = db_query("SELECT cf_uid FROM {culturefeed_user} WHERE uid = :uid", array(':uid' => $account->uid))->fetchField();
  
  db_delete('culturefeed_user')
    ->condition('uid', $account->uid)
    ->execute();
  db_delete('culturefeed_token')
    ->condition('cf_uid', $culturefeed_uid)
    ->execute();
}

function culturefeed_user_get($cf_uid, $token = NULL, $secret = NULL, $application_key = NULL) {
  $account = NULL;
  
  if (!$application_key) {
    $application_key = variable_get('culturefeed_api_application_key', '');
  }

  $user_exists = db_query("SELECT * FROM {culturefeed_user} cfu WHERE cfu.cf_uid = :cf_uid", array(':cf_uid' => $cf_uid))->fetchObject();
  
  if (!$user_exists) {
    $account = culturefeed_user_create($cf_uid);
    db_insert('culturefeed_user')
      ->fields(array(
        'uid' => $account->uid,
        'cf_uid' => $cf_uid,
        ))
      ->execute();
  }
  else {
    $account = user_load($user_exists->uid);
  }
  
  if ($token) {
    $token_exists = db_query("SELECT * FROM {culturefeed_token} cft WHERE cft.cf_uid = :cf_uid AND cft.application_key = :application_key", array(':cf_uid' => $cf_uid, ':application_key' => $application_key))->fetchObject();
    
    db_delete('culturefeed_token')
      ->condition('cf_uid', $cf_uid)
      ->condition('application_key', $application_key)
      ->execute();
    
    db_insert('culturefeed_token')
      ->fields(array(
        'cf_uid' => $cf_uid,
        'token' => $token,
        'secret' => $secret,
        'application_key' => $application_key,
        ))
      ->execute();
  }

  return $account;
}

function culturefeed_get_events_for_activities($activities) {
  $events = array();

  foreach ($activities as $activity) {
    if ($activity->contentType == CultureFeed_Activity::CONTENT_TYPE_EVENT) {
      $events[$activity->nodeId] = NULL;
    }
  }

  $cdbids = array_unique(array_keys($events));

  return culturefeed_get_events_for_cdbids($cdbids);
}

function culturefeed_get_events_for_cdbids($cdbids) {
  $results = cnapi_get_events(array('cdbid' => implode(';', $cdbids), 'pagelength' => count($cdbids)));

  foreach ($results['data'] as $result) {
    $events[$result['cdbid']] = $result;
  }

  return $events;
}

function culturefeed_log($type, $exception) {
  watchdog($type, '[%error]: !message in %file on line %line.', array('%error' => $exception->getCode(), '!message' => $exception->getMessage(), '%file' => $exception->getFile(), '%line' => $exception->getLine()), WATCHDOG_ERROR);
}