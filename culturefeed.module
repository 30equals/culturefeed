<?php

require_once('culturefeed.helpers.inc');

define('CULTUREFEED_CACHE_DISABLED', 0);
define('CULTUREFEED_CACHE_ENABLED', 1);

define('CULTUREFEED_CACHE_EXPIRES', 3600);

define('CULTUREFEED_API_LOCATION', 'http://test.UiTiD.be/culturefeed/rest/');

/**
 * Implements hook_init().
 */
function culturefeed_init() {
  if (DrupalCultureFeed::isCultureFeedUser()) {
    try {
      DrupalCultureFeed::getLoggedInUser();
    }
    catch (Exception $e) {
      watchdog_exception('culturefeed', $e);
    
      if ($e->getCode() == 401) {
        global $user;
        
        watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
        
        module_invoke_all('user_logout', $user);
        
        // Destroy the current session, and reset $user to the anonymous user.
        session_destroy();
        
        drupal_set_message('Er was een probleem met jouw connectie. Gelieve opnieuw in te loggen.', 'error');
        
        drupal_goto();
      }
    }
  }
  
  drupal_add_js(drupal_get_path('module', 'culturefeed') . '/js/culturefeed.js');

  if (isset($_GET['closepopup'])) {
    drupal_add_js('try { window.opener.location.reload(); } catch (err) {Â }  window.close();', 'inline');
  }

  drupal_add_js(array('culturefeed' => array('isCultureFeedUser' => DrupalCultureFeed::isCultureFeedUser())), 'setting');
}

/**
 * Implements hook_menu().
 */
function culturefeed_menu() {
  $items['admin/config/services/culturefeed'] = array(
    'title' => 'Culture Feed',
    'description' => 'Change Culture Feed API setting like API Appliction key, location, ...',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'culturefeed.admin.inc',
  );
  $items['culturefeed/oauth/connect'] = array(
    'title' => 'Connect',
    'page callback' => 'culturefeed_oauth_connect',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed.pages.inc',
  );
  $items['culturefeed/oauth/connect/register'] = array(
    'title' => 'Connect',
    'page callback' => 'culturefeed_oauth_connect',
    'page arguments' => array(CultureFeed::AUTHORIZE_TYPE_REGISTER),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed.pages.inc',
  );
  $items['culturefeed/oauth/authorize'] = array(
    'title' => 'Connect',
    'page callback' => 'culturefeed_oauth_authorize',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_flush_caches().
 */
function culturefeed_flush_caches() {
  return array('cache_culturefeed');
}

/**
 * Implements hook_user_load().
 */
function culturefeed_user_load($users) {
  $result = db_query('SELECT cfu.uid, cfu.cf_uid, cft.application_key, cft.token, cft.secret FROM {culturefeed_user} cfu LEFT JOIN {culturefeed_token} cft ON cft.cf_uid = cfu.cf_uid WHERE cfu.uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->culturefeed_uid = $record->cf_uid;
    if (!isset($users[$record->uid]->tokens)) {
      $users[$record->uid]->tokens = array();
    }
    if ($record->token) {
      $users[$record->uid]->tokens[$record->application_key]->token = $record->token;
      $users[$record->uid]->tokens[$record->application_key]->secret = $record->secret;
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function culturefeed_user_delete($account) {
  $culturefeed_uid = db_query("SELECT cf_uid FROM {culturefeed_user} WHERE uid = :uid", array(':uid' => $account->uid))->fetchField();

  db_delete('culturefeed_user')
    ->condition('uid', $account->uid)
    ->execute();
  db_delete('culturefeed_token')
    ->condition('cf_uid', $culturefeed_uid)
    ->execute();
}

/**
 * Implements hook_form_alter().
 */
function culturefeed_form_system_performance_settings_alter(&$form, $form_state) {
  // We want our stuff before the clear cache fieldset and button.
  $form['buttons']['#weight'] = 3;
  $form['clear_cache']['#weight'] = 2;

  // Adding API cache settings to the performance settings form.

  $form['culturefeed_cache'] = array(
    '#type' => 'fieldset',
    '#title' => t('CultureFeed cache'),
    '#weight' => 1,
    '#description' => t('Enabling the CultureFeed cache will cache some parsed results of requests to the CultureFeed API. This will reduce the number of requests made directly to the API service.'),
  );
  $form['culturefeed_cache']['culturefeed_cache_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cache API requests'),
    '#default_value' => variable_get('culturefeed_cache_status', CULTUREFEED_CACHE_DISABLED),
  );
}