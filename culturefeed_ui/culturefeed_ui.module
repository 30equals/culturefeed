<?php

require_once('culturefeed_ui.helpers.inc');
require_once('culturefeed_ui.preprocess.inc');

/**
 * Implements hook_menu().
 */
function culturefeed_ui_menu() {
  $items['admin/config/services/culturefeed_ui'] = array(
    'title' => 'Culture Feed User Interface',
    'description' => 'Change Culture Feed User Interface settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_ui_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'culturefeed_ui.admin.inc',
  );
  $items['culturefeed/profile/edit'] = array(
    'title' => 'Edit profile',
    'description' => 'Change Culture Feed profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_ui_profile_edit_form'),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/account/edit'] = array(
    'title' => 'Edit account',
    'description' => 'Change Culture Feed account',
    'page callback' => 'culturefeed_ui_page_account_edit',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/mboxverify/resend'] = array(
    'title' => 'Resend e-mail confirmation link',
    'description' => 'Resend e-mail confirmation link',
    'page callback' => 'culturefeed_ui_page_mboxverify_resend',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/users/search'] = array(
    'title' => 'Search users',
    'description' => 'Search users',
    'page callback' => 'culturefeed_ui_page_search_users',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/activities/recent'] = array(
    'title' => 'Recent activities',
    'description' => 'Recent activities',
    'page callback' => 'culturefeed_ui_page_recent_activities',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/serviceconsumers'] = array(
    'title' => 'Connected service consumers',
    'description' => 'Connected service consumers',
    'page callback' => 'culturefeed_ui_page_serviceconsumers',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/serviceconsumers/revoke/%'] = array(
    'title' => 'Revoke service consumer',
    'description' => 'Revoke service consumer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_ui_page_serviceconsumers_revoke_form', 3),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/onlineaccounts/delete/%/%'] = array(
    'title' => 'Delete online account',
    'description' => 'Delete online account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_ui_page_online_account_delete_form', 3, 4),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/users/mostactive'] = array(
    'title' => 'Most active users',
    'description' => 'Most active users',
    'page callback' => 'culturefeed_ui_page_most_active_users',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/users/likes/%/%'] = array(
    'title' => 'Users who like event',
    'description' => 'Uses who like event',
    'page callback' => 'culturefeed_ui_page_users_likes',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/recommendations'] = array(
    'title' => 'Recommendations',
    'description' => 'Recommendations',
    'page callback' => 'culturefeed_ui_page_recommendations',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/recommendations/%/%/%'] = array(
    'title' => 'Delete recommendation',
    'description' => 'Delete recommendation',
    'page callback' => 'culturefeed_ui_recommendations_delete',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function culturefeed_ui_theme() {
  return array(
    'culturefeed_ui_profile' => array(
      'variables' => array('user' => NULL),
      'template' => 'culturefeed-ui-profile',
    ),
    'culturefeed_ui_profile_box' => array(
      'variables' => array('nick' => '', 'picture' => '', 'url_profile' => ''),
      'template' => 'culturefeed-ui-profile-box',
    ),
    'culturefeed_ui_most_active_user' => array(
      'variables' => array('account' => null, 'sort' => CultureFeed_SearchUsersQuery::SORT_NUMBEROFACTIVEACTIVITIES, 'sort_value' => 0),
      'template' => 'culturefeed-ui-most-active-user',
    ),
    'culturefeed_ui_connect' => array(
      'variables' => array(),
      'template' => 'culturefeed-ui-connect',
    ),
    'culturefeed_ui_mbox_confirmation_reminder' => array(
      'variables' => array('account' => NULL),
      'template' => 'culturefeed-ui-mbox-confirmation-reminder',
    ),
    'culturefeed_ui_user_summary' => array(
      'variables' => array('user' => NULL, 'uid' => NULL),
      'template' => 'culturefeed-ui-user-summary',
    ),
    'culturefeed_ui_ranked_user_summary' => array(
      'variables' => array('user' => NULL, 'uid' => NULL),
      'template' => 'culturefeed-ui-ranked-user-summary',
    ),
    'culturefeed_ui_activity_summary' => array(
      'variables' => array('activity' => NULL, 'node' => NULL, 'uid' => NULL),
      'template' => 'culturefeed-ui-activity-summary',
    ),
    'culturefeed_ui_profile_menu_item' => array(
      'variables' => array('title' => '', 'url' => '', 'description' => ''),
      'template' => 'culturefeed-ui-profile-menu-item',
    ),
    'culturefeed_ui_related_events' => array(
      'variables' => array('events' => array(), 'zip' => NULL, 'headings' => array()),
      'template' => 'culturefeed-ui-related-events',
    ),
    'culturefeed_ui_service_consumer_summary' => array(
      'variables' => array('consumer' => NULL),
      'template' => 'culturefeed-ui-service-consumer-summary',
    ),
    'culturefeed_ui_online_accounts_form' => array(
      'render element' => 'form',
      'file' => 'culturefeed_ui.pages.inc',
    ),
    'culturefeed_ui_online_account' => array(
      'variables' => array('type' => '', 'name' => '', 'privacy_checkbox' => '', 'connect_link' => ''),
      'template' => 'culturefeed-ui-online-account',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function culturefeed_ui_block_info() {
  $block['connect']['info'] = t('CultureFeed Connect');
  $block['connect']['cache'] = DRUPAL_NO_CACHE;

  $block['users_likes']['info'] = t('Users who like this');
  $block['users_likes']['cache'] = DRUPAL_NO_CACHE;

  $block['most_active_user']['info'] = t('Most active user');
  $block['most_active_user']['cache'] = DRUPAL_CACHE_GLOBAL;

  $block['profile_box']['info'] = t('CultureFeed Profile box');
  $block['profile_box']['cache'] = DRUPAL_NO_CACHE;

  $block['profile_menu']['info'] = t('CultureFeed Profile menu');
  $block['profile_menu']['cache'] = DRUPAL_CACHE_PER_PAGE;

  $block['mbox_confirmation_reminder']['info'] = t('CultureFeed E-mail confirmation reminder');
  $block['mbox_confirmation_reminder']['cache'] = DRUPAL_NO_CACHE;

  $block['recent_activities']['info'] = t('Recent activities');
  $block['recent_activities']['cache'] = DRUPAL_NO_CACHE;

  $block['user_activities']['info'] = t('User activities');
  $block['user_activities']['cache'] = DRUPAL_NO_CACHE;

  $block['top_events']['info'] = t('Top events');
  $block['top_events']['cache'] = DRUPAL_CACHE_GLOBAL;

  $block['search_users']['info'] = t('Search users');
  $block['search_users']['cache'] = DRUPAL_CACHE_GLOBAL;

  $block['similar_users']['info'] = t('Similar users');
  $block['similar_users']['cache'] = DRUPAL_CACHE_CUSTOM;

  $block['user_picture']['info'] = t('User picture');
  $block['user_picture']['cache'] = DRUPAL_NO_CACHE;

  $block['related_events']['info'] = t('Related events');
  $block['related_events']['cache'] = DRUPAL_CACHE_CUSTOM;

  return $block;
}

/**
 * Implements hook_block_view().
 */
function culturefeed_ui_block_view($delta = '') {
  module_load_include('inc', 'culturefeed_ui', 'culturefeed_ui.blocks');
  
  if (function_exists('culturefeed_ui_block_is_visible_' . $delta)) {
    if (!call_user_func('culturefeed_ui_block_is_visible_' . $delta)) {
      return FALSE;
    }
  }
  
  if (function_exists('culturefeed_ui_block_cache_id_' . $delta)) {
    $cid = culturefeed_ui_block_get_cache_id($delta);
    
    if ($cache = cache_get($cid, 'cache_block')) {
      return $cache->data;
    }
    
    if (function_exists('culturefeed_ui_block_view_' . $delta)) {
      $block = call_user_func('culturefeed_ui_block_view_' . $delta);
      
      cache_set($cid, $block, 'cache_block', CACHE_TEMPORARY);
      
      return $block;
    }
  }
  else {
    if (function_exists('culturefeed_ui_block_view_' . $delta)) {
      return call_user_func('culturefeed_ui_block_view_' . $delta);
    }
  }
}

function culturefeed_ui_block_get_cache_id($delta) {
  global $theme, $base_root, $user;

  // User 1 being out of the regular 'roles define permissions' schema,
  // it brings too many chances of having unwanted output get in the cache
  // and later be served to other users. We therefore exclude user 1 from
  // block caching.
  if (variable_get('block_cache', FALSE) && $user->uid != 1) {
    // Start with common sub-patterns: block identification, theme, language.
    $cid_parts[] = 'culturefeed_ui';
    $cid_parts[] = $delta;
    $cid_parts[] = $theme;
    // If Locale is enabled but we have only one language we do not need it as cid
    // part.
    if (drupal_multilingual()) {
      foreach (language_types_configurable() as $language_type) {
        $cid_parts[] = $GLOBALS[$language_type]->language;
      }
    }
  
    $cid_parts = array_merge($cid_parts, call_user_func('culturefeed_ui_block_cache_id_' . $delta));
    
    return implode(':', $cid_parts);
  }
}

/**
 * Implements hook_block_configure().
 */
function culturefeed_ui_block_configure($delta = '') {
  module_load_include('inc', 'culturefeed_ui', 'culturefeed_ui.blocks');

  if (function_exists('culturefeed_ui_block_configure_' . $delta)) {
    return call_user_func('culturefeed_ui_block_configure_' . $delta);
  }
}

/**
 * Implements hook_block_save().
 */
function culturefeed_ui_block_save($delta = '', $edit = array()) {
  module_load_include('inc', 'culturefeed_ui', 'culturefeed_ui.blocks');

  if (function_exists('culturefeed_ui_block_save_' . $delta)) {
    return call_user_func('culturefeed_ui_block_save_' . $delta, $edit);
  }
}

/**
 * Implements hook_user_view().
 */
function culturefeed_ui_user_view($account) {
  global $user;

  if (!DrupalCultureFeed::isCultureFeedUser()) {
    return;
  }

  try {
    $cf_account = DrupalCultureFeed::getConsumerInstance()->getUser($account->culturefeed_uid, FALSE, FALSE);
  }
  catch (Exception $e) {
    watchdog_exception('culturefeed_ui', $e);
    return;
  }

  $account->content['culturefeed'] = array(
    '#theme' => 'culturefeed_ui_profile',
    '#user' => $cf_account,
  );
}

function culturefeed_ui_search_users_form() {
  $form = array();

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Name',
    '#size' => 20,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

function culturefeed_ui_search_users_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $form_state['redirect'] = 'culturefeed/users/search' . (!empty($values['name']) ? '/' . trim($values['name']) : '');
}

function culturefeed_ui_is_culturefeed_user($uid = NULL) {
  return DrupalCultureFeed::isCultureFeedUser($uid);
}