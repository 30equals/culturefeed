<?php

require_once('culturefeed_ui.helpers.inc');
require_once('culturefeed_ui.preprocess.inc');
require_once('culturefeed_ui.forms.inc');

define('CULTUREFEED_UI_BLOCK_TOP_EVENTS_COUNT', 5);
define('CULTUREFEED_UI_BLOCK_USER_ACTIVITIES_COUNT', 20);
define('CULTUREFEED_UI_BLOCK_RECENT_ACTIVITIES_COUNT', 5);
define('CULTUREFEED_UI_BLOCK_USERS_ACTIVITY_COUNT', 12);
define('CULTUREFEED_UI_BLOCK_RELATED_EVENTS_COUNT', 5);
define('CULTUREFEED_UI_PAGE_ACTIVITIES_COUNT', 20);
define('CULTUREFEED_UI_PAGE_SEARCH_USERS_COUNT', 20);
define('CULTUREFEED_UI_PAGE_MOST_ACTIVE_USERS_COUNT', 10);
define('CULTUREFEED_UI_PAGE_RECENT_ACTIVITIES_COUNT', 20);

// @todo translate page titles

/**
 * Implements hook_menu().
 */
function culturefeed_ui_menu() {
  $items['admin/config/services/culturefeed_ui'] = array(
    'title' => 'Culture Feed User Interface',
    'description' => 'Change Culture Feed User Interface settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_ui_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'culturefeed_ui.admin.inc',
  );
  $items['culturefeed/profile/edit'] = array(
    'title' => 'Edit profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_ui_page_profile_edit_form'),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/account/edit'] = array(
    'title' => 'Edit account',
    'page callback' => 'culturefeed_ui_page_account_edit',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/mboxverify/resend'] = array(
    'title' => 'Resend e-mail confirmation link',
    'page callback' => 'culturefeed_ui_page_mboxverify_resend',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/users/search'] = array(
    'title' => 'Search users',
    'page callback' => 'culturefeed_ui_page_users_search',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/activities/recent'] = array(
    'title' => 'Recent activities',
    'page callback' => 'culturefeed_ui_page_recent_activities',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/serviceconsumers'] = array(
    'title' => 'Connected service consumers',
    'page callback' => 'culturefeed_ui_page_serviceconsumers',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/serviceconsumers/revoke/%/%'] = array(
    'title' => 'Revoke service consumer',
    'page callback' => 'culturefeed_ui_page_serviceconsumer_revoke',
    'page arguments' => array(3, 4),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/onlineaccounts/delete/%/%'] = array(
    'title' => 'Delete online account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_ui_page_online_account_delete_form', 3, 4),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/users/mostactive'] = array(
    'title' => 'Most active users',
    'page callback' => 'culturefeed_ui_page_users_most_active',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/users/activity/%/%/%'] = array(
    'title' => 'Users who did activity',
    'page callback' => 'culturefeed_ui_page_users_for_content_activity',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/activities'] = array(
    'title' => 'Activities',
    'page callback' => 'culturefeed_ui_page_activities',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/recommendations'] = array(
    'title' => 'Recommendations',
    'page callback' => 'culturefeed_ui_page_recommendations',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/recommendations/%/%/%/%'] = array(
    'title' => 'Delete recommendation',
    'page callback' => 'culturefeed_ui_page_recommendation_evaluate',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/do/%/%/%'] = array(
    'title' => 'Do activity',
    'page callback' => 'culturefeed_ui_page_do',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/do/%/%/%/noredirect'] = array(
    'title' => 'Do activity',
    'page callback' => 'culturefeed_ui_page_do',
    'page arguments' => array(2, 3, 4, FALSE),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/undo/%/%/%'] = array(
    'title' => 'Unlike',
    'page callback' => 'culturefeed_ui_page_undo',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/activity/delete/%/%'] = array(
    'title' => 'Delete activity',
    'page callback' => 'culturefeed_ui_page_activity_delete',
    'page arguments' => array(3, 4),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/activity/privacy/%/%/%'] = array(
    'title' => 'Activity privacy',
    'page callback' => 'culturefeed_ui_page_activity_privacy',
    'page arguments' => array(3, 4, 5),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function culturefeed_ui_theme() {
  return array(
    'culturefeed_ui_profile' => array(
      'variables' => array('user' => NULL),
      'template' => 'culturefeed-ui-profile',
    ),
    'culturefeed_ui_profile_box' => array(
      'variables' => array('account' => NULL),
      'template' => 'culturefeed-ui-profile-box',
    ),
    'culturefeed_ui_most_active_user' => array(
      'variables' => array('account' => null, 'sort' => CultureFeed_SearchUsersQuery::SORT_NUMBEROFACTIVEACTIVITIES),
      'template' => 'culturefeed-ui-most-active-user',
    ),
    'culturefeed_ui_connect' => array(
      'variables' => array(),
      'template' => 'culturefeed-ui-connect',
    ),
    'culturefeed_ui_mbox_confirmation_reminder' => array(
      'variables' => array('account' => NULL),
      'template' => 'culturefeed-ui-mbox-confirmation-reminder',
    ),
    'culturefeed_ui_user_summary' => array(
      'variables' => array('user' => NULL, 'uid' => NULL),
      'template' => 'culturefeed-ui-user-summary',
    ),
    'culturefeed_ui_ranked_user_summary' => array(
      'variables' => array('user' => NULL, 'uid' => NULL),
      'template' => 'culturefeed-ui-ranked-user-summary',
    ),
    'culturefeed_ui_activity_summary' => array(
      'variables' => array('activity' => NULL, 'uid' => NULL),
      'template' => 'culturefeed-ui-activity-summary',
    ),
    'culturefeed_ui_profile_menu_item' => array(
      'variables' => array('title' => '', 'url' => '', 'description' => ''),
      'template' => 'culturefeed-ui-profile-menu-item',
    ),
    'culturefeed_ui_related_events' => array(
      'variables' => array('events' => array(), 'cityid' => NULL, 'headings' => array()),
      'template' => 'culturefeed-ui-related-events',
    ),
    'culturefeed_ui_service_consumer_summary' => array(
      'variables' => array('consumer' => NULL, 'revoke_link' => ''),
      'template' => 'culturefeed-ui-service-consumer-summary',
    ),
    'culturefeed_ui_online_accounts_form' => array(
      'render element' => 'form',
      'file' => 'culturefeed_ui.pages.inc',
    ),
    'culturefeed_ui_online_account' => array(
      'variables' => array('type' => '', 'name' => '', 'privacy_checkbox' => '', 'connect_link' => ''),
      'template' => 'culturefeed-ui-online-account',
    ),
    'culturefeed_ui_event_recommendation' => array(
      'variables' => array('event' => '', 'links' => array(), 'heading_level' => ''),
      'template' => 'culturefeed-ui-event-recommendation',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function culturefeed_ui_block_info() {
  $block['connect']['info'] = t('CultureFeed Connect');
  $block['connect']['cache'] = DRUPAL_NO_CACHE;

  $block['users_likes']['info'] = t('Users who like this');
  $block['users_likes']['cache'] = DRUPAL_NO_CACHE;

  $block['users_attends']['info'] = t('Users who attend this');
  $block['users_attends']['cache'] = DRUPAL_NO_CACHE;

  $block['most_active_user']['info'] = t('Most active user');
  $block['most_active_user']['cache'] = DRUPAL_CACHE_GLOBAL;

  $block['profile_box']['info'] = t('CultureFeed Profile box');
  $block['profile_box']['cache'] = DRUPAL_NO_CACHE;

  $block['profile_menu']['info'] = t('CultureFeed Profile menu');
  $block['profile_menu']['cache'] = DRUPAL_NO_CACHE;

  $block['mbox_confirmation_reminder']['info'] = t('CultureFeed E-mail confirmation reminder');
  $block['mbox_confirmation_reminder']['cache'] = DRUPAL_NO_CACHE;

  $block['recent_activities']['info'] = t('Recent activities');
  $block['recent_activities']['cache'] = DRUPAL_NO_CACHE;

  $block['user_activities']['info'] = t('User activities');
  $block['user_activities']['cache'] = DRUPAL_NO_CACHE;

  $block['user_liked_locations']['info'] = t('User liked locations');
  $block['user_liked_locations']['cache'] = DRUPAL_NO_CACHE;

  $block['top_events']['info'] = t('Top events');
  $block['top_events']['cache'] = DRUPAL_CACHE_CUSTOM;

  $block['search_users']['info'] = t('Search users');
  $block['search_users']['cache'] = DRUPAL_NO_CACHE;

  $block['similar_users']['info'] = t('Similar users');
  $block['similar_users']['cache'] = DRUPAL_CACHE_CUSTOM;

  $block['related_events']['info'] = t('Related events');
  $block['related_events']['cache'] = DRUPAL_CACHE_CUSTOM;

  $block['recommendations']['info'] = t('Recommendations');
  $block['recommendations']['cache'] = DRUPAL_NO_CACHE;

  return $block;
}

/**
 * Implements hook_block_view().
 */
function culturefeed_ui_block_view($delta = '') {
  module_load_include('inc', 'culturefeed_ui', 'culturefeed_ui.blocks');

  if (function_exists('culturefeed_ui_block_is_visible_' . $delta)) {
    if (!call_user_func('culturefeed_ui_block_is_visible_' . $delta)) {
      return FALSE;
    }
  }

  if (function_exists('culturefeed_ui_block_cache_id_' . $delta) && $_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'HEAD') {
    $cid = culturefeed_ui_block_get_cache_id($delta);

    if ($cache = cache_get($cid, 'cache_block')) {
      return $cache->data;
    }

    if (function_exists('culturefeed_ui_block_view_' . $delta)) {
      $block = call_user_func('culturefeed_ui_block_view_' . $delta);

      $cache_expires = CACHE_TEMPORARY;

      if (function_exists('culturefeed_ui_block_cache_expires_' . $delta)) {
        $cache_expires = call_user_func('culturefeed_ui_block_cache_expires_' . $delta);
      }

      cache_set($cid, $block, 'cache_block', $cache_expires);

      return $block;
    }
  }
  else {
    if (function_exists('culturefeed_ui_block_view_' . $delta)) {
      return call_user_func('culturefeed_ui_block_view_' . $delta);
    }
  }
}

function culturefeed_ui_block_get_cache_id($delta) {
  global $theme, $base_root, $user;

  // User 1 being out of the regular 'roles define permissions' schema,
  // it brings too many chances of having unwanted output get in the cache
  // and later be served to other users. We therefore exclude user 1 from
  // block caching.
  if (variable_get('block_cache', FALSE) && $user->uid != 1) {
    // Start with common sub-patterns: block identification, theme, language.
    $cid_parts[] = 'culturefeed_ui';
    $cid_parts[] = $delta;
    $cid_parts[] = $theme;
    // If Locale is enabled but we have only one language we do not need it as cid
    // part.
    if (drupal_multilingual()) {
      foreach (language_types_configurable() as $language_type) {
        $cid_parts[] = $GLOBALS[$language_type]->language;
      }
    }

    $cid_parts = array_merge($cid_parts, call_user_func('culturefeed_ui_block_cache_id_' . $delta));

    return implode(':', $cid_parts);
  }
}

/**
 * Implements hook_block_configure().
 */
function culturefeed_ui_block_configure($delta = '') {
  module_load_include('inc', 'culturefeed_ui', 'culturefeed_ui.blocks');

  if (function_exists('culturefeed_ui_block_configure_' . $delta)) {
    return call_user_func('culturefeed_ui_block_configure_' . $delta);
  }
}

/**
 * Implements hook_block_save().
 */
function culturefeed_ui_block_save($delta = '', $edit = array()) {
  module_load_include('inc', 'culturefeed_ui', 'culturefeed_ui.blocks');

  if (function_exists('culturefeed_ui_block_save_' . $delta)) {
    return call_user_func('culturefeed_ui_block_save_' . $delta, $edit);
  }
}

/**
 * Implements hook_user_view().
 */
function culturefeed_ui_user_view($account) {
  if (!DrupalCultureFeed::isCultureFeedUser($account->uid)) {
    return;
  }

  try {
    $cf_account = DrupalCultureFeed::getUser($account->culturefeed_uid);
  }
  catch (Exception $e) {
    watchdog_exception('culturefeed_ui', $e);
    return;
  }

  $account->content['culturefeed'] = array(
    '#theme' => 'culturefeed_ui_profile',
    '#user' => $cf_account,
  );
}

/**
 * Implements hook_form_alter().
 */
function culturefeed_ui_form_system_performance_settings_alter(&$form, $form_state) {
  // We want our stuff before the clear cache fieldset and button.
  $form['buttons']['#weight'] = 3;
  $form['clear_cache']['#weight'] = 2;

  // Adding API cache settings to the performance settings form.

  $form['culturefeed_ui_cache'] = array(
    '#type' => 'fieldset',
    '#title' => t('CultuurNet User Interface cache'),
    '#weight' => 1,
    '#description' => t('Enabling the CultuurNet User Interface cache will cache all parsed results of requests to the enrichments API. This will reduce the number of requests made directly to the API service.'),
  );

  $period = array(0 => '<' . t('none') . '>') + drupal_map_assoc(array(0, 60, 180, 300, 600, 900, 1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400, 86400 * 2, 86400 * 5, 86400 * 7, 86400 * 14, 86400 * 28), 'format_interval');
  $form['culturefeed_ui_cache']['culturefeed_ui_related_events_block_cache_expires'] = array(
    '#type' => 'select',
    '#title' => t('Minimum cache lifetime for the related events block'),
    '#default_value' => variable_get('culturefeed_ui_related_events_block_cache_expires', 86400),
    '#options' => $period,
    '#description' => t('The minimum cache lifetime is the minimum amount of time that will elapse before the cache is emptied and recreated'),
  );

  $form['culturefeed_ui_cache']['culturefeed_ui_top_events_block_cache_expires'] = array(
    '#type' => 'select',
    '#title' => t('Minimum cache lifetime for the top events block'),
    '#default_value' => variable_get('culturefeed_ui_top_events_block_cache_expires', 3600),
    '#options' => $period,
    '#description' => t('The minimum cache lifetime is the minimum amount of time that will elapse before the cache is emptied and recreated'),
  );

  $form['culturefeed_ui_cache']['culturefeed_ui_similar_users_block_cache_expires'] = array(
    '#type' => 'select',
    '#title' => t('Minimum cache lifetime for the similar users block'),
    '#default_value' => variable_get('culturefeed_ui_similar_users_block_cache_expires', 3600),
    '#options' => $period,
    '#description' => t('The minimum cache lifetime is the minimum amount of time that will elapse before the cache is emptied and recreated'),
  );
}

function culturefeed_ui_is_culturefeed_user($uid = NULL) {
  return DrupalCultureFeed::isCultureFeedUser($uid);
}