<?php

require_once('culturefeed_ui.helpers.inc');
require_once('culturefeed_ui.preprocess.inc');

/**
 * Implements hook_menu().
 */
function culturefeed_ui_menu() {
  $items['admin/config/services/culturefeed_ui'] = array(
    'title' => 'Culture Feed User Interface',
    'description' => 'Change Culture Feed User Interface settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_ui_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'culturefeed_ui.admin.inc',
  );
  $items['culturefeed/profile/edit'] = array(
    'title' => 'Edit profile',
    'description' => 'Change Culture Feed profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_ui_profile_edit_form'),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/account/edit'] = array(
    'title' => 'Edit account',
    'description' => 'Change Culture Feed account',
    'page callback' => 'culturefeed_ui_page_account_edit',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/users/search'] = array(
    'title' => 'Search users',
    'description' => 'Search users',
    'page callback' => 'culturefeed_ui_page_search_users',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/activities/recent'] = array(
    'title' => 'Recent activities',
    'description' => 'Recent activities',
    'page callback' => 'culturefeed_ui_page_recent_activities',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/serviceconsumers'] = array(
    'title' => 'Connected service consumers',
    'description' => 'Connected service consumers',
    'page callback' => 'culturefeed_ui_page_serviceconsumers',
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/serviceconsumers/revoke/%'] = array(
    'title' => 'Revoke service consumer',
    'description' => 'Revoke service consumer',
    'page callback' => 'culturefeed_ui_page_serviceconsumers_revoke',
    'page arguments' => array(3),
    'access callback' => 'culturefeed_ui_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );
  $items['culturefeed/users/mostactive'] = array(
    'title' => 'Most active users',
    'description' => 'Most active users',
    'page callback' => 'culturefeed_ui_page_most_active_users',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_ui.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function culturefeed_ui_theme() {
  return array(
    'culturefeed_ui_profile' => array(
      'variables' => array('user' => NULL),
      'template' => 'culturefeed-ui-profile',
    ),
    'culturefeed_ui_profile_box' => array(
      'variables' => array('nick' => '', 'picture' => '', 'url_profile' => ''),
      'template' => 'culturefeed-ui-profile-box',
    ),
    'culturefeed_ui_most_active_user' => array(
      'variables' => array('account' => null, 'sort' => CultureFeed_SearchUsersQuery::SORT_NUMBEROFACTIVEACTIVITIES, 'sort_value' => 0),
      'template' => 'culturefeed-ui-most-active-user',
    ),
    'culturefeed_ui_connect' => array(
      'variables' => array(),
      'template' => 'culturefeed-ui-connect',
    ),
    'culturefeed_ui_user_summary' => array(
      'variables' => array('user' => NULL, 'uid' => NULL),
      'template' => 'culturefeed-ui-user-summary',
    ),
    'culturefeed_ui_activity_summary' => array(
      'variables' => array('activity' => NULL, 'node' => NULL, 'uid' => NULL),
      'template' => 'culturefeed-ui-activity-summary',
    ),
    'culturefeed_ui_profile_menu_item' => array(
      'variables' => array('title' => '', 'url' => '', 'description' => ''),
      'template' => 'culturefeed-ui-profile-menu-item',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function culturefeed_ui_block_info() {
  $block['connect']['info'] = t('CultureFeed Connect');
  $block['connect']['cache'] = DRUPAL_CACHE_GLOBAL;

  $block['likes']['info'] = t('Likes');
  $block['likes']['cache'] = DRUPAL_NO_CACHE;

  $block['most_active_user']['info'] = t('Most active user');
  $block['most_active_user']['cache'] = DRUPAL_CACHE_GLOBAL;

  $block['profile_box']['info'] = t('CultureFeed Profile box');
  $block['profile_box']['cache'] = DRUPAL_NO_CACHE;

  $block['profile_menu']['info'] = t('CultureFeed Profile menu');
  $block['profile_menu']['cache'] = DRUPAL_CACHE_PER_USER;

  $block['recent_activities']['info'] = t('Recent activities');
  $block['recent_activities']['cache'] = DRUPAL_NO_CACHE;

  $block['user_activities']['info'] = t('User activities');
  $block['user_activities']['cache'] = DRUPAL_NO_CACHE;

  $block['top_events']['info'] = t('Top events');
  $block['top_events']['cache'] = DRUPAL_CACHE_GLOBAL;

  $block['search_users']['info'] = t('Search users');
  $block['search_users']['cache'] = DRUPAL_CACHE_GLOBAL;

  $block['similar_users']['info'] = t('Similar users');
  $block['similar_users']['cache'] = DRUPAL_CACHE_PER_PAGE;

  $block['user_picture']['info'] = t('User picture');
  $block['user_picture']['cache'] = DRUPAL_NO_CACHE;

  return $block;
}

/**
 * Implements hook_block_view().
 */
function culturefeed_ui_block_view($delta = '') {
  module_load_include('inc', 'culturefeed_ui', 'culturefeed_ui.blocks');

  if (function_exists('culturefeed_ui_block_view_' . $delta)) {
    return call_user_func('culturefeed_ui_block_view_' . $delta);
  }
}

/**
 * Implements hook_block_configure().
 */
function culturefeed_ui_block_configure($delta = '') {
  module_load_include('inc', 'culturefeed_ui', 'culturefeed_ui.blocks');

  if (function_exists('culturefeed_ui_block_configure_' . $delta)) {
    return call_user_func('culturefeed_ui_block_configure_' . $delta);
  }
}

/**
 * Implements hook_block_save().
 */
function culturefeed_ui_block_save($delta = '', $edit = array()) {
  module_load_include('inc', 'culturefeed_ui', 'culturefeed_ui.blocks');

  if (function_exists('culturefeed_ui_block_save_' . $delta)) {
    return call_user_func('culturefeed_ui_block_save_' . $delta, $edit);
  }
}

/**
 * Implements hook_user_view().
 */
function culturefeed_ui_user_view($account) {
  global $user;

  if (!DrupalCultureFeed::isCultureFeedUser()) {
    return;
  }

  try {
    $cf_account = DrupalCultureFeed::getConsumerInstance()->getUser($account->culturefeed_uid, FALSE, FALSE);
  }
  catch (Exception $e) {
    watchdog_exception('culturefeed_ui', $e);
    return;
  }

  $account->content['culturefeed'] = array(
    '#theme' => 'culturefeed_ui_profile',
    '#user' => $cf_account,
  );
}

function culturefeed_ui_search_users_form() {
  $form = array();

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Name',
    '#size' => 20,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

function culturefeed_ui_search_users_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $form_state['redirect'] = 'culturefeed/users/search' . (!empty($values['name']) ? '/' . trim($values['name']) : '');
}

function culturefeed_ui_is_culturefeed_user($uid = NULL) {
  return DrupalCultureFeed::isCultureFeedUser($uid);
}