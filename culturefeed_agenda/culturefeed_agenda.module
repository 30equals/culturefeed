<?php
use Symfony\Component\Console\Output\NullOutput;

/**
 * @file
 * Performs searches to the Cultuurnet api.
 *
 * @todo
 * - Fix the function culturefeed_agenda_activity_recommend_link so that the function
 *   "culturefeed_ui_block_users_recommends_config" is moved to correct place
 *
 */

module_load_include('inc', 'culturefeed_agenda', 'includes/helpers');

/**
 * Implements hook_theme().
 */
function culturefeed_agenda_theme() {

  $theme = array();
  $path = drupal_get_path('module', 'culturefeed_agenda') . '/theme';
  $item_types = array('event', 'production', 'actor');

  foreach ($item_types as $type) {

    $theme['culturefeed_' . $type . '_summary'] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type . '-summary',
      'path' => $path,
      'file' => 'theme.inc',
    );

    $theme['culturefeed_' . $type . '_short_summary'] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type . '-short-summary',
      'path' => $path,
      'file' => 'theme.inc',
    );

    $theme['culturefeed_' . $type] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type,
      'path' => $path,
      'file' => 'theme.inc',
    );

  }

  $theme['culturefeed_agenda_actor_program'] = array(
    'variables' => array('items' => array()),
    'template' => 'culturefeed-agenda-actor-program',
    'path' => $path,
    'file' => 'theme.inc',
  );

  return $theme;

}

/**
 * Implements hook_menu().
 */
function culturefeed_agenda_menu() {

  $items = array();

  // Menu path for detail pages.
  $items['agenda/a/%/%culturefeed_agenda_actor'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(3),
    'page callback' => 'culturefeed_agenda_detail_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['agenda/e/%/%culturefeed_agenda_event'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(3),
    'page callback' => 'culturefeed_agenda_detail_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['agenda/p/%/%culturefeed_agenda_production'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(3),
    'page callback' => 'culturefeed_agenda_detail_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  return $items;

}

/**
 * Implements hook_culturefeed_search_page_info().
 */
function culturefeed_agenda_culturefeed_search_page_info() {
  return array(
    'activiteiten' => array(
      'path' => 'agenda/search',
      'page_title' => 'Agenda',
      'search_title' => 'Activiteiten',
      'sort_default' => 'relevancy',
      'sort_options' => array(
        'relevancy' => 'Relevantie',
        'date' => 'Datum',
        'recommends' => 'Aantal keer aangeraden',
        'comments' => 'Aantal reacties',
      ),
      'class_name' => 'CultureFeedAgendaPage',
      'weight' => -20,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function culturefeed_agenda_block_info() {

  $blocks = array();

  $blocks['agenda-related-activities'] = array(
    'info' => t('Culturefeed agenda: related activities'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['agenda-search-block'] = array(
    'info' => t('Agenda quick search'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['actor-program'] = array(
    'info' => t('Production / actor program'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['movie-playlist'] = array(
    'info' => t('Movie playlist'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;

}

/**
 * Implements hook_block_configure().
 */
function culturefeed_agenda_block_configure($delta) {

  $form = array();

  if ($delta == 'agenda-related-activities') {

    $options = array('' => t('None'));
    $options += culturefeed_search_get_domains();
    $form['agenda_related_activities_context'] = array(
      '#title' => t('Category type to search related events'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => variable_get('agenda_related_activities_context'),
      '#description' => t('The category type to use for searching related activities. Leave empty if you only want to search on range.')
    );

    $form['agenda_related_activities_range'] = array(
      '#title' => t('Radius to search in km'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_range', 0),
      '#description' => t('Search on the given radius. Leave empty to skip radius search. Radius search will only be done when viewing an event.'),
    );

    $form['agenda_related_activities_extra_query'] = array(
      '#title' => t('Extra filter query for the result set'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_extra_query'),
      '#description' => t('Make sure this is a correct solr query. Example title=mytitle'),
    );

    $form['agenda_related_activities_sort'] = array(
      '#title' => t('Sort field'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_sort'),
      '#description' => t('Field to sort on. Example startdate'),
    );

    $form['agenda_related_activities_sort_direction'] = array(
      '#title' => t('Sort direction'),
      '#type' => 'select',
      '#options' => array(
        \CultuurNet\Search\Parameter\Sort::DIRECTION_ASC => t('Ascending'),
        \CultuurNet\Search\Parameter\Sort::DIRECTION_DESC => t('Descending'),
      ),
      '#default_value' => variable_get('agenda_related_activities_sort_direction', 'asc'),
    );

    $form['agenda_related_activities_total_items'] = array(
      '#title' => t('Items to show'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_total_items', 5),
    );

  }

  elseif ($delta == 'agenda-search-block') {

    $options = array('' => t('None'));
    $options += culturefeed_search_get_domains();

    $form['agenda_search_block_domain_id'] = array(
      '#title' => t('Categories to show in the dropdown'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => variable_get('agenda_search_block_domain_id'),
    );

  }

  return $form;

}

/**
 * Implements hook_block_save().
 */
function culturefeed_agenda_block_save($delta, $edit) {

  if ($delta == 'agenda-related-activities') {
    variable_set('agenda_related_activities_context', $edit['agenda_related_activities_context']);
    variable_set('agenda_related_activities_range', $edit['agenda_related_activities_range']);
    variable_set('agenda_related_activities_extra_query', $edit['agenda_related_activities_extra_query']);
    variable_set('agenda_related_activities_sort', $edit['agenda_related_activities_sort']);
    variable_set('agenda_related_activities_sort_direction', $edit['agenda_related_activities_sort_direction']);
    variable_set('agenda_related_activities_total_items', $edit['agenda_related_activities_total_items']);
  }
  elseif ($delta == 'agenda-search-block') {
    variable_set('agenda_search_block_domain_id', $edit['agenda_search_block_domain_id']);
  }

}

/**
 * Implements hook_block_view().
 */
function culturefeed_agenda_block_view($delta) {

  module_load_include('inc', 'culturefeed_agenda', 'includes/blocks');
  $block = array();

  switch ($delta) {

    case 'agenda-related-activities':
      return culturefeed_agenda_block_related_activities();

    case 'agenda-search-block':
      $block['content'] = drupal_get_form('culturefeed_agenda_search_block_form');
    break;

    case 'actor-program':
      return culturefeed_agenda_block_actor_program();

    case 'movie-playlist':
      return culturefeed_agenda_block_movie_playlist();

  }

  return $block;

}

/**
 * Title callback for agenda detail pages.
 */
function culturefeed_agenda_detail_title(\CultuurNet\Search\ActivityStatsExtendedEntity $item) {

  global $language;
  $details = $item->getEntity()->getDetails()->getDetailByLanguage($language->language);

  if ($details) {
    return $details->getTitle();
  }

}

/**
 * Load an event from the api.
 */
function culturefeed_agenda_event_load($cdb_id) {
  return culturefeed_search_item_load($cdb_id);
}

/**
 * Load an actor from the api.
 */
function culturefeed_agenda_actor_load($cdb_id) {
  return culturefeed_search_item_load($cdb_id);
}

/**
 * Load a production from the api.
 */
function culturefeed_agenda_production_load($cdb_id) {
  return culturefeed_search_item_load($cdb_id);
}
