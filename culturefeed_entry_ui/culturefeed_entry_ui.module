<?php

// Category ids needed.
define('ENTRY_API_KIJKEN_EN_LUISTEREN_CAT_ID', '0.100.0.0.0');
define('ENTRY_API_DOEN_CAT_ID', '0.100.1.0.0');
define('ENTRY_API_BEZOEKEN_CAT_ID', '0.100.2.0.0');

/**
 * Implements hook_permission().
 */
function culturefeed_entry_ui_permission() {
  return array(
    'manage object tags' => array(
      'title' => t('Manage object tags'),
      'description' => t('Manage all the tags from the objects on culturefeed (events, actors, ...).'),
    ),
    'manage custom tags' => array(
      'title' => t('Manage custom tags'),
      'description' => t('Manage custom tags from the objects on culturefeed (events, actors, ...) managed on the admin section.'),
    ),
    'create culturefeed events' => array(
      'title' => t('Create events'),
      'description' => t('Create new events through the entity api.'),
    ),
    'edit culturefeed events' => array(
      'title' => t('Edit events'),
      'description' => t('Edit events through the entity api.'),
    ),
    'delete culturefeed events' => array(
      'title' => t('Delete events'),
      'description' => t('Delete events through the entity api.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function culturefeed_entry_ui_theme() {

  return array(
    'culturefeed_entry_ui_opening_times_table' => array(
      'file' => 'theme/theme.inc',
      'render element' => 'element',
    ),
  );

}

/**
 * Implements hook_menu().
 */
function culturefeed_entry_ui_menu() {

  $items = array();

  $items['culturefeed_entry_ui/event/%entry_api_event/tags'] = array(
    'title' => 'Tags',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_edit_tags_form', 2),
    'access callback' => 'culturefeed_entry_ui_manage_tags_access',
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['culturefeed_entry_ui/event/add'] = array(
    'title' => 'Nieuwe activiteit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_event_form'),
    'access arguments' => array('create culturefeed events'),
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['culturefeed_entry_ui/event/%entry_api_event/edit'] = array(
    'title' => 'Activiteit aanpassen',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_event_form', 2),
    'access arguments' => array('edit culturefeed events'),
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['culturefeed_entry_ui/event/%entry_api_event/delete'] = array(
    'title' => 'Activiteit verwijderen',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_delete_event_form', 2),
    'access arguments' => array('delete culturefeed events'),
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );
  
  $items['admin/config/culturefeed/entry_ui'] = array(
    'title' => 'CultureFeed Entry UI',
    'description' => 'All configurations to entry api for this site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/culturefeed_entry_ui.admin.inc',
  );

  return $items;

}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function culturefeed_entry_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  $id = '';
  if (arg(0) == 'agenda' && arg(1) == 'e') {
    $id = arg(3);
  }
  elseif (arg(0) == 'culturefeed_entry_ui' && arg(2) != 'add') {
    $id = arg(2);
  }

  if (!$id) {
    return;
  }

  $tabs = array();
  // Add a tab for managing the tags.
  if (culturefeed_entry_ui_manage_tags_access()) {

    $link = array(
      'href' => 'culturefeed_entry_ui/event/' . $id . '/tags',
      'localized_options' => array(),
      'title' => t('Tags'),
    );

    $tabs[] = array('#theme' => 'menu_local_action', '#link' => $link);

  }

  // Add tab for editing the event.
  if (user_access('edit culturefeed events')) {

    $link = array(
      'href' => 'culturefeed_entry_ui/event/' . $id . '/edit',
      'localized_options' => array(),
      'title' => t('Edit'),
    );

    $tabs[] = array('#theme' => 'menu_local_action', '#link' => $link);

  }

  // Detail only exists when culturefeed_agenda is enabled.
  if ($tabs && module_exists('culturefeed_agenda')) {

    $event = culturefeed_search_item_load($id, 'event');
    $title = $event->getEntity()->getDetails()->getDetailByLanguage(culturefeed_search_get_preferred_language())->getTitle();
    $request_detail = array(
      'event' => $id,
      'title' => $title,
    );
    $path = culturefeed_search_detail_path($event->getType(), $id, $title);

    $link = array(
      'href' => $path,
      'localized_options' => array(),
      'title' => t('View'),
    );
    $tab = array('#theme' => 'menu_local_action', '#link' => $link);
    array_unshift($tabs, $tab);

  }

  $data['tabs'] = array(
    0 => array(
      'output' => $tabs,
      'count' => count($tabs),
    ),
  );

}

/**
 * Load an event on the entry api.
 */
function entry_api_event_load($id) {

  static $events = array();
  if (isset($events[$id])) {
    return $events[$id];
  }

  try {
    $events[$id] = Drupalculturefeed_EntryApi::getEvent($id);
    return $events[$id];
  }
  catch (Exception $e) {
    watchdog_exception('culturefeed_entry_ui', $e, array(), WATCHDOG_ERROR);
  }

  $events[$id] = FALSE;

  return FALSE;

}

/**
 * Access callback, to check if a user has access to the manage tags screen.
 */
function culturefeed_entry_ui_manage_tags_access() {
  return user_access('manage custom tags') || user_access('manage object tags');
}

/**
 * Submit callback for the 'add more' buttons.
 */
function culturefeed_entry_ui_add_more_submit($form, &$form_state) {

  switch ($form_state['input']['_triggering_element_name']) {

    case 'timestamps_add_more':
      $form_state['#timestamps_needed'] = count(element_children($form['timestamps'])) + 1;
    break;

    case 'contacts_add_more':
      $form_state['#contacts_needed'] = count(element_children($form['contacts'])) + 1;
    break;

    case 'opening_times_add_more':
      $form_state['#opening_times_needed'] = count(element_children($form['period_or_permanent']['opening_times']['monday'])) + 1;
    break;

  }

  $form_state['rebuild'] = TRUE;

}

/**
 * Ajax form callback: Add a new row.
 * Return the element that was set in the submit.
 */
function culturefeed_entry_ui_add_more_js($form, $form_state) {

  switch ($form_state['input']['_triggering_element_name']) {

    case 'timestamps_add_more':
      return $form['timestamps'];
    break;

    case 'contacts_add_more':
      return $form['contacts'];
    break;

    case 'opening_times_add_more':
      return $form['period_or_permanent']['opening_times'];
    break;

  }

}
