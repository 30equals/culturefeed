<?php
/**
 * @file
 * Module file for all functionality for CultureFeed Search.
 */

module_load_include('inc', 'culturefeed_search_ui', 'includes/helpers');

/**
 * Constants to define the available pager types.
 */
define("CULTUREFEED_SEARCH_UI_PAGER_NORMAL", 0);
define("CULTUREFEED_SEARCH_UI_PAGER_INFINITE_SCROLL", 1);

define("CULTUREFEED_SEARCH_UI_PAGER_ITEMS_PER_PAGE", 10);

/**
 * Implements hook_menu().
 */
function culturefeed_search_ui_menu() {

  $items = array();

  // Dummy page callback used to redirect the user to the real search page.
  $items['culturefeed/search'] = array(
    'title' => 'Culturefeed search',
    'title callback' => FALSE,
    'page callback' => 'culturefeed_search_ui_search_page',
    'page arguments' => array('submitted'),
    'file' => 'includes/pages.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  foreach (culturefeed_get_searchable_types() as $name => $search_type) {

    $class_name = isset($search_type['class_name']) ? $search_type['class_name'] : 'CultureFeedSearchPage';

    // Menu paths for search.
    $items[$search_type['path']] = array(
      'title' => $search_type['page_title'],
      'title callback' => FALSE,
      'page callback' => 'culturefeed_search_ui_search_page',
      'page arguments' => array($name, $class_name),
      'file' => 'includes/pages.inc',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[$search_type['path'] . '/%'] = array(
      'title' => $search_type['page_title'],
      'title callback' => FALSE,
      'page callback' => 'culturefeed_search_ui_search_page',
      'page arguments' => array($name, $class_name, TRUE),
      'file' => 'includes/pages.inc',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );

  }

  // Autocomplete path for suggestions.
  $items['autocomplete/culturefeed/suggestions'] = array(
    'title' => 'Culturefeed suggestions autocomplete',
    'page callback' => 'culturefeed_search_ui_suggestions_autocomplete_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  // Autocomplete path for region suggestions.
  $items['autocomplete/culturefeed/region-suggestion'] = array(
    'page callback' => 'culturefeed_search_ui_region_suggestion_autocomplete_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  // Autocomplete for city and region suggestions
  $items['autocomplete/culturefeed/city-suggestion'] = array(
    'page callback' => 'culturefeed_search_ui_city_suggestion_autocomplete_page',
    'page arguments' => array(3, FALSE),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );
  $items['autocomplete/culturefeed/city-region-suggestion'] = array(
    'page callback' => 'culturefeed_search_ui_city_suggestion_autocomplete_page',
    'page arguments' => array(3, TRUE),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['admin/config/services/culturefeed_search_ui'] = array(
    'title' => 'Culture Feed Search UI',
    'description' => 'Change Culture Feed Search UI settings like display, filters, ...',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_search_ui_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
  );

  return $items;

}

/**
 * Implements hook_theme().
 */
function culturefeed_search_ui_theme() {

  $path = drupal_get_path('module', 'culturefeed_search_ui') . '/theme';

  return array(

    'culturefeed_search_page' => array(
      'variables' => array(
        'searchresult' => NULL
      ),
      'template' => 'culturefeed-search-page',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_list' => array(
      'variables' => array(
        'items' => NULL,
        'nowrapper' => FALSE,
      ),
      'template' => 'culturefeed-search-list',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_facet' => array(
      'variables' => array(
        'facet' => NULL,
        'items' => array(),
        'title' => NULL,
        'path' => NULL,
        'query' => NULL,
      ),
      'template' => 'culturefeed-search-facet',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_facet_item' => array(
      'variables' => array(
        'facet_item' => NULL,
        'facet' => NULL,
        'path' => NULL,
        'query' => NULL,
        'active' => FALSE,
      ),
      'template' => 'culturefeed-search-facet-item',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_active_filters_item' => array(
      'variables' => array(
        'label' => NULL,
        'url' => NULL,
      ),
      'template' => 'culturefeed-search-active-filters-item',
      'path' => $path,
    ),
    'culturefeed_search_pager_summary' => array(
      'variables' => array(
        'result' => NULL,
        'start' => 0,
      ),
      'path' => $path,
      'file' => 'theme.inc',
    ),

  );

}

/**
 * Implements hook_library().
 */
function culturefeed_search_ui_library() {

  $path = drupal_get_path('module', 'culturefeed_search_ui');

  // Date range picker
  $libraries['ui.daterangepicker'] = array(
    'title' => 'Datejs',
    'website' => 'http://filamentgroup.com/lab/date_range_picker_using_jquery_ui_16_and_jquery_ui_css_framework/',
    'version' => '1',
    'js' => array(
      $path . '/js/daterangepicker.jQuery.compressed.js' => array(),
    ),
    'css' => array(
      $path . '/css/ui.daterangepicker.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui.datepicker'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_block_info().
 */
function culturefeed_search_ui_block_info() {
  $blocks = array();

  $blocks['culturefeed-search-box'] = array(
    'info' => t('Culturefeed search: search box'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['culturefeed-search-sortorder'] = array(
    'info' => t('Culturefeed search: sort order'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['culturefeed-search-activefilters'] = array(
    'info' => t('Culturefeed search: active filters'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['facet-datetype'] = array(
    'info' => t('Culturefeed search facet: When'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['facet-city'] = array(
    'info' => t('Culturefeed search facet: Where'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // Facet blocks.
  $domains = db_query('SELECT did, label FROM {culturefeed_search_domains}');
  foreach ($domains as $domain) {
    $blocks['facet-' . $domain->did] = array(
      'info' => t('Culturefeed search facet: @label', array('@label' => $domain->label)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;

}

/**
 * Implements hook_block_view().
 */
function culturefeed_search_ui_block_view($delta) {

  module_load_include('inc', 'culturefeed_search_ui', 'includes/blocks');
  $block = array();

  switch ($delta) {

    case 'culturefeed-search-box':
      $block['content'] = drupal_get_form('culturefeed_search_ui_search_block_form');
      break;

    case 'culturefeed-search-sortorder':
      global $facetingComponent;
      if ($facetingComponent instanceof \CultuurNet\Search\Component\Facet\FacetComponent) {
        $block['content'] = drupal_get_form('culturefeed_search_ui_search_sortorder_form');
      }
    break;

    case 'culturefeed-search-activefilters':
      $block['subject'] = 'Je zocht op:';
      $block['content'] = culturefeed_search_ui_search_active_filters_block();
    break;

    case 'facet-datetype':
      $block = culturefeed_search_ui_block_date_facet();
    break;

    case 'facet-city':
      $block = culturefeed_search_ui_block_city_facet();
    break;

    default:

      $delta_parts = explode('-', $delta);
      if (isset($delta_parts[0]) && $delta_parts[0] == 'facet') {
        $block = culturefeed_search_ui_search_facets_block('category_' . $delta_parts[1] . '_name', $delta_parts[1]);
      }

  }

  return $block;

}

/**
 * Load all searchable types.
 * This wil invoke a hook. Modules can define following stuff.
 *  return array(
 *   'activiteiten' => array(
 *     'path' => 'agenda/search',
 *     'page_title' => 'Agenda',
 *     'search_title' => 'Activiteiten',
 *     'class_name' => 'CultureFeedAgendaPage',
 *       'sort_options' => array(
 *       'relevancy' => 'Relevantie',
 *       'date' => 'Datum',
 *       'recommends' => 'Aantal keer aangeraden',
 *       'comments' => 'Aantal reacties',
 *     ),
 *     'active_facets' => array('category_actortype_name' => array('Organisator(en)')),  => optional
 *   ),
 * );
 */
function culturefeed_get_searchable_types() {

  $options = drupal_static('culturefeed_searchable_types');
  if ($options !== NULL) {
    return $options;
  }

  // Get all searchable page types.
  $options = module_invoke_all('culturefeed_search_page_info');

  foreach ($options as $key => $data) {
    if (!isset($data['class_name'])) {
      $options[$key]['class_name'] = 'CultureFeedSearchPage';
    }
  }

  // Make sure you can alter the searchable data per site.
  drupal_alter('culturefeed_search_page_info', $options);

  return $options;
}

/**
 * Load a searchable type.
 * @param String $name
 * @return Array searchable type.
 */
function culturefeed_get_searchable_type($name) {
  $options = culturefeed_get_searchable_types();
  return isset($options[$name]) ? $options[$name] : NULL;
}
